{"version":3,"sources":["App.js","Broadcast.js","Watch.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","endpoint","react_default","a","createElement","es","to","Component","Broadcast","send","socketIOClient","emit","peerConnections","config","iceServers","urls","window","startGetUserMedia","socket","on","id","peerConnection","RTCPeerConnection","console","log","addStream","document","querySelector","srcObject","createOffer","then","sdp","setLocalDescription","localDescription","onicecandidate","event","candidate","description","setRemoteDescription","addIceCandidate","RTCIceCandidate","autoPlay","playsInline","Watch","createAnswer","onaddstream","stream","catch","e","error","Boolean","location","hostname","match","ReactDOM","render","history","browserHistory","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c808c669.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Link } from \"react-router\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { endpoint: \"https://videostreamtestwebrtc.herokuapp.com/\" }\n  }\n  render() {\n    return (\n      <div>\n        <ul>\n          <li><Link to=\"/Broadcast\">Broadcast</Link></li>\n          <li><Link to=\"/Watch\">Watch</Link></li>\n        </ul>\n      </div>);\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport socketIOClient from \"socket.io-client\";\r\nclass Broadcast extends Component {\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            endpoint: \"https://videostreamtestwebrtc.herokuapp.com\",\r\n            peerConnections: {},\r\n            config: {\r\n                'iceServers': [{\r\n                    'urls': ['stun:stun.l.google.com:19302']\r\n                }]\r\n            }\r\n        }\r\n    }\r\n    //invoke camera of the broadcaster\r\n    componentDidMount() {\r\n        window.startGetUserMedia();\r\n    }\r\n\r\n    //start sending broadcaster\r\n    send = () => {\r\n        const socket = socketIOClient(this.state.endpoint);\r\n        socket.emit('broadcaster');\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const peerConnections = {};\r\n\r\n        const socket = socketIOClient(this.state.endpoint);\r\n        socket.on('watcher', function (id) {\r\n            const peerConnection = new RTCPeerConnection( {\r\n                'iceServers': [{\r\n                    'urls': ['stun:stun.l.google.com:19302']\r\n                }]\r\n            });\r\n            peerConnections[id] = peerConnection;\r\n            console.log(\"id of the peer\" + peerConnections[id]);\r\n            peerConnection.addStream(document.querySelector('video').srcObject);\r\n            peerConnection.createOffer()\r\n                .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                .then(function () {\r\n                    socket.emit('offer', id, peerConnection.localDescription);\r\n                });\r\n            peerConnection.onicecandidate = function (event) {\r\n                if (event.candidate) {\r\n                    socket.emit('candidate', id, event.candidate);\r\n                }\r\n            };\r\n        });\r\n\r\n        socket.on('answer', function (id, description) {\r\n            peerConnections[id].setRemoteDescription(description);\r\n        });\r\n\r\n        socket.on('candidated', function (id, candidate) {\r\n            peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\r\n        });\r\n\r\n        return (\r\n            <div>I am the broadcaster\r\n                 <h1>Realtime communication with WebRTC</h1>\r\n                <video autoPlay playsInline></video>\r\n                <div>\r\n                    {/* <button onClick={() => this.send()}>Start Stream</button> */}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default Broadcast;","import React, { Component } from 'react';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nclass Watch extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            endpoint: \"https://videostreamtestwebrtc.herokuapp.com\"\r\n        }\r\n    }\r\n    send = () => {\r\n        const socket = socketIOClient(this.state.endpoint);\r\n\r\n    }\r\n    render() {\r\n\r\n        const socket = socketIOClient(this.state.endpoint);\r\n\r\n        socket.on('broadcaster', function () {\r\n            console.log(\"got broadcaster\");\r\n            socket.emit('watcher');\r\n        });\r\n\r\n\r\n        socket.on('connect', function () {\r\n            console.log('watcher by connect');\r\n            socket.emit('watcher');\r\n        });\r\n\r\n\r\n        let peerConnection;\r\n        //send clients sdpco\r\n        socket.on('offer', function (id, description) {\r\n\r\n            console.log(\"came offer\")\r\n\r\n            peerConnection = new RTCPeerConnection( {\r\n                'iceServers': [{\r\n                    'urls': ['stun:stun.l.google.com:19302']\r\n                }]\r\n            });\r\n            peerConnection.setRemoteDescription(description)\r\n                .then(() => peerConnection.createAnswer())\r\n                .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                .then(function () {\r\n                    socket.emit('answer', id, peerConnection.localDescription);\r\n                });\r\n            peerConnection.onaddstream = function (event) {\r\n                document.querySelector('video').srcObject = event.stream;\r\n            };\r\n            peerConnection.onicecandidate = function (event) {\r\n                if (event.candidate) {\r\n                    socket.emit('candidated', id, event.candidate);\r\n                }\r\n            };\r\n        });\r\n\r\n        socket.on('candidate', function (id, candidate) {\r\n            peerConnection.addIceCandidate(new RTCIceCandidate(candidate))\r\n                .catch(e => console.error(e));\r\n        });\r\n\r\n        return (\r\n            <div> I am the watcher\r\n                <div>\r\n                    {/* <button onClick={() => this.send()}>Ask</button> */}\r\n                    <video autoPlay playsInline></video>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default Watch;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Broadcast from './Broadcast';\nimport Watch from './Watch';\nimport * as serviceWorker from './serviceWorker';\nimport { Router, Route, browserHistory } from 'react-router'\n\nReactDOM.render(\n    <Router history={browserHistory}>\n\n        <Route path=\"/\" component={App}></Route>\n        <Route path=\"/Broadcast\" component={Broadcast}></Route>\n        <Route path=\"/Watch\" component={Watch}></Route>\n    </Router>\n\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}